namespace: cert-manager
targetRevision: v1.17.2

# Enable the external-secrets operator needed to interact with external-secrets CRDs.
enableExternalSecrets: true

clusterIssuers:
  enabled: false

  issuers:
    # Issuer with all fields
    - name: letsencrypt-staging-all-fields
      server: https://acme-staging-v02.api.letsencrypt.org/directory
      # Only existing secrets are supported, either an external secret
      # or a previously created secret
      secretName: cloudflare-issuer-secret
      externalSecret:
        enabled: true
        # Name in the remote secret store
        secretName: cloudflare-issuer-secret
        # Name of the deployed secret store in the cluster
        secretStore: kubernetes
        # Type is optional but will default to ClusterSecretStore
        # secretStoreType: ClusterSecretStore

        # Property of the remote secret store that contains the token
        # Optional, will default to "token"
        # tokenPropertyName: password
      domains:
        - example1.com
        - example2.com
      # Add more domains as needed

  # Issuer with only the required fields
  # - name: letsencrypt-staging
  #   server: https://acme-staging-v02.api.letsencrypt.org/directory
  #   secretName: cloudflare-issuer-secret
  #   externalSecret:
  #     enabled: true
  #     secretName: cloudflare-issuer-secret
  #     secretStore: kubernetes
  #   # Or with externalSecret.enabled: false an existing secret is used
  #   domains:
  #     - example1.com
  #     - example2.com

# Scoped external secret vaults to push certificates to. To use these vaults
# external-secrets must be configured to use the vaults and have read/write
# permissions to the vaults.
# This is useful for pushing certificates to a vault like 1Password for use
# in other namespaces or clusters.
certSecretStores:
  enabled: true
  connectToken:
    # Name of the secret in the cluster that contains the connect token.
    # This is used to authenticate with the vault. Can be set for individual vaults
    # or globally for all vaults.
    name: onepassword-connect-token
    namespace: external-secrets

  secretStores:
    - name: certs-push-vault
      vaultName: kubernetes-certs-vault
      # If the connect token is not set, the default connect token from certSecretStores.connectToken will be used.
      # connectToken:
      #   name: onepassword-connect-token
      #   namespace: external-secrets


# Enable certs management using the defined issuers
certs:
  enabled: true

  # If enabled, the operator will push the certificates to the vaults defined in certPushVaults
  push: 
    # If enabled, the certificates will be pushed to the vaults defined in certPushVaults
    enabled: false
    # Default settings for certificates pushed to vaults
    refreshInterval: 1h
    secretStore: kubernetes-certs-vault

  certs:
    - name: example-com-tls
      commonName: example.com
      clusterIssuer: letsencrypt-staging
      dnsNames:
        - example.com
        - "*.example.com"
      push: 
        # If enabled, the certificate will be pushed to the vaults defined in certPushVaults
        # Will only work if certs.push.enabled and certPushVaults.enabled are true.
        enabled: true
        # Refresh interval for the certificate in the vaults
        # This is the interval at which the certificate will be updated in the vaults
        # If not set, the default refresh interval from certs.push will be used.
        # refreshInterval: 1h

        # Name of the secret in the vault. If not set the name of the certificate will be used.
        # secretName: example-com-tls

        # Name of the vault to push the certificate to.
        # If not set, the default vault from certs.push will be used.
        # This vault must be defined in certPushVaults.
        # secretStore: certs-push-vault

# Helm values passed to the cert-manager chart.
cert-manager: 
  crds:
    enabled: true
  replicaCount: 1
  extraArgs:
    - --dns01-recursive-nameservers=1.1.1.1:53,9.9.9.9:53
    - --dns01-recursive-nameservers-only
  podDnsPolicy: None
  podDnsConfig:
    nameservers:
      - 1.1.1.1
      - 9.9.9.9
