# Values for the k3s-certs chart.
#
# By default this chart will install cert-manager and the namespace 
# 
# The following is only applicable for pull reflected secrets. For push 
# reflected secret disable the reflectedSecret and externalSecret of the 
# resource and only set the secretName. The chart will assume the secret
# is pushed before the resource is enabled (responsibility of the user).
#
# If reflected secrets are used make sure first deploy the resource 
# in a disabled state (enabled: false) but the reflectedSecret.enabled: true
# this will create the reflected secret manifest in the namespace and give
# the cluster reflector instance some time to reconsile the secret.
# After the secret is reflected you can enable the resource and use the secret.

global:
  # Global labels to add to all resources in this chart.
  # These labels and annotations will also be added to cert-manager resources
  # as the use the same global values.
  commonLabels:
    tenancy.io/stack: "k3s-certs"
    tenancy.io/tenant: "testing"

  commonAnnotations: {}

  # Global node selector
  # The nodeSelector on Pods tells Kubernetes to schedule Pods on the nodes with matching labels.
  nodeSelector: {}

  # The optional priority class to be used for the cert-manager pods.
  priorityClassName: ""

# Deploy the resources in this chart. If set to false only the dependancies
# will be deployed.
enabled: true

# The namespace will always be created, also if the global .enabled is set to false.
namespace:
  # If the namespace should be created using helm hooks before the chart is deployed.
  hooked: false

networkPolicies:
  enabled: false

issuers:
  enabled: false

  issuers:
    # Issuer with all fields
    - name: letsencrypt-staging-all-fields
      enabled: false
      server: https://acme-staging-v02.api.letsencrypt.org/directory
      domains:
        - example1.com
        - example2.com
        # Add more domains as needed
      # Only existing secrets are supported, either an external secret
      # or a previously created secret
      secretName: cloudflare-issuer-secret
      # The secret can either be pulled from an external secret store or reflected
      # from another namespace. Only one can be used at a time.
      # If both are set the reflected secret will be used.
      externalSecret:
        # If set to false the chart will assume a secret with the set secretName
        # and the connect token in the token property is already present
        # in the namespace. If set to true the chart will attempt to retreive
        # the connect token from the secret store defined in the secretStore
        # property.
        enabled: false
        # Name in the remote secret store
        secretName: cloudflare-issuer-secret
        # Name of the deployed secret store in the cluster
        secretStore: kubernetes
        # Type is optional but will default to ClusterSecretStore
        # secretStoreType: ClusterSecretStore

        # Property of the remote secret store that contains the token
        # Optional, will default to "password"
        # secretField: password
      reflectedSecret:
        # If set to true the chart will create a reflected secret in the namespace
        # with the name of the secretName property.
        enabled: true
        originNamespace: default
        originSecretName: cloudflare-issuer-secret

clusterIssuers:
  enabled: false

  issuers:
    # Issuer with all fields
    - name: letsencrypt-staging-all-fields
      enabled: false
      server: https://acme-staging-v02.api.letsencrypt.org/directory
      domains:
        - example1.com
        - example2.com
          # Add more domains as needed
      # Only existing secrets are supported, either an external secret
      # or a previously created secret
      secretName: cloudflare-issuer-secret
      externalSecret:
        enabled: false
        # Name in the remote secret store
        secretName: cloudflare-cluster-issuer-secret
        # Name of the deployed secret store in the cluster
        secretStore: kubernetes
        # Type is optional but will default to ClusterSecretStore
        # secretStoreType: ClusterSecretStore

        # Property of the remote secret store that contains the token
        # Optional, will default to "password"
        # secretField: password
      reflectedSecret:
        # If set to true the chart will create a reflected secret in the namespace
        # with the name of the secretName property.
        enabled: true
        originNamespace: default
        originSecretName: cloudflare-issuer-secret

# Enable certs management using the defined issuers
certs:
  enabled: false
  allowReflection: false
  certs:
    - name: example-com-tls
      enabled: false
      commonName: example.com
      issuer: letsencrypt-staging
      # Certificate for the root domain and wildcard
      dnsNames:
        - example.com
        - "*.example.com"
      reflector:
        enabled: true
        allowedNamespaces: "example-namespace1,example-namespace2"
        allowAutoReflection: true
        autoReflectionNamespaces: "example-namespace1,example-namespace2"

# Helm values passed to the cert-manager chart.
cert-manager: 
  enabled: true
  crds:
    enabled: true
  replicaCount: 1
  extraArgs:
    - --dns01-recursive-nameservers=1.1.1.1:53,9.9.9.9:53
    - --dns01-recursive-nameservers-only
  podDnsPolicy: None
  podDnsConfig:
    nameservers:
      - 1.1.1.1
      - 9.9.9.9
  
  prometheus:
    enabled: false
    podmonitor:
      enabled: false

  webhook:
    networkPolicy:
      enabled: true

# Helm values passed to the reflector chart.
# https://github.com/emberstack/kubernetes-reflector/blob/main/src/helm/reflector/values.yaml
reflector: 
  enabled: false
  replicaCount: 1
  cron:
    enabled: false
    schedule: "*/15 * * * *"
    activeDeadlineSeconds: 600
  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  topologySpreadConstraints: []
  priorityClassName: ""