global:
  # Global labels to add to all resources in this chart.
  # These labels and annotations will also be added to cert-manager resources
  # as the use the same global values.
  commonAnnotations: {}
  commonLabels: {}

# Deploy the resources in this chart. If set to false only the dependancies
# will be deployed.
enabled: true

# Enable the external-secrets operator needed to interact with external-secrets CRDs.
enableExternalSecrets: true

namespace:
  enabled: true
  name: cert-manager

  # If the namespace should be created using helm hooks before the chart is deployed.
  # This is useful if the namespace needs to be created before the chart is deployed
  hooked: false

  # Annotations and labels to add to the namespace.
  commonAnnotations: {}
  commonLabels: {}

clusterIssuers:
  enabled: false

  issuers:
    # Issuer with all fields
    - name: letsencrypt-staging-all-fields
      server: https://acme-staging-v02.api.letsencrypt.org/directory
      # Only existing secrets are supported, either an external secret
      # or a previously created secret
      secretName: cloudflare-issuer-secret
      externalSecret:
        # If set to false the chart will assume a secret with the set secretName
        # and the connect token in the token property is already present
        # in the namespace. If set to true the chart will attempt to retreive
        # the connect token from the secret store defined in the secretStore
        # property.
        enabled: true
        # Name in the remote secret store
        secretName: cloudflare-issuer-secret
        # Name of the deployed secret store in the cluster
        secretStore: kubernetes
        # Type is optional but will default to ClusterSecretStore
        # secretStoreType: ClusterSecretStore

        # Property of the remote secret store that contains the token
        # Optional, will default to "token"
        # tokenPropertyName: password
      domains:
        - example1.com
        - example2.com
      # Add more domains as needed

  # Issuer with only the required fields
  # - name: letsencrypt-staging
  #   server: https://acme-staging-v02.api.letsencrypt.org/directory
  #   secretName: cloudflare-issuer-secret
  #   externalSecret:
  #     enabled: true
  #     secretName: cloudflare-issuer-secret
  #     secretStore: kubernetes
  #   # Or with externalSecret.enabled: false an existing secret is used
  #   domains:
  #     - example1.com
  #     - example2.com

# Scoped external secret vaults to push certificates to. To use these vaults
# external-secrets must be configured to use the vaults and have read/write
# permissions to the vaults.
# This is useful for pushing certificates to a vault like 1Password for use
# in other namespaces or clusters.
certStores:
  enabled: true
  # Default values for the connectToken block. These are used as fallback
  # values for the connectToken block in the secretStores
  connectToken:
    # If enabled the chart will attemt to retreive a connect token from an existing secret
    # store. If disabled the chart will assume a secret with the same name and
    # property is already present in the namespace.
    enabled: true

    # Name of the secret that will be created
    name: "certs-push-vault-token"

    # The secret store to use. Make sure the operator has access to the nanespace
    # and is able to reconsile secrets in this namespace
    secretStore: "main-vault"
    secretStoreType: "ClusterSecretStore"

    # Name of the secret in the secret storage and the property to use
    # to retreive the connect token. The token should have read and write
    # access to the vaults in the secret storage
    remoteName: "onepassword-connect-token"
    remoteProperty: "connect_token"

  secretStores:
    - name: certs-push-vault
      storeName: kubernetes-certs-vault
      # Optional, defaults to true
      enabled: true

# Enable certs management using the defined issuers
certs:
  enabled: true

  # If enabled, the operator will push the certificates to the vaults defined in certPushVaults
  push: 
    # If enabled, the certificates will be pushed to the vaults defined in certPushVaults
    enabled: false
    # Default settings for certificates pushed to vaults
    refreshInterval: 1h
    secretStore: kubernetes-certs-vault

  certs:
    - name: example-com-tls
      commonName: example.com
      clusterIssuer: letsencrypt-staging
      dnsNames:
        - example.com
        - "*.example.com"
      push: 
        # If enabled, the certificate will be pushed to the vaults defined in certVaults
        # Will only work if certs.push.enabled and certVaults.enabled are true.
        enabled: true
        # Refresh interval for the certificate in the vaults
        # This is the interval at which the certificate will be updated in the vaults
        # If not set, the default refresh interval from certs.push will be used.
        # refreshInterval: 1h

        # Name of the secret in the vault. If not set the name of the certificate will be used.
        # secretName: example-com-tls

        # Name of the vault to push the certificate to.
        # If not set, the default vault from certs.push will be used.
        # This vault must be defined in certVaults.
        # secretStore: certs-push-vault

# Helm values passed to the cert-manager chart.
cert-manager: 
  crds:
    enabled: true
  replicaCount: 1
  extraArgs:
    - --dns01-recursive-nameservers=1.1.1.1:53,9.9.9.9:53
    - --dns01-recursive-nameservers-only
  podDnsPolicy: None
  podDnsConfig:
    nameservers:
      - 1.1.1.1
      - 9.9.9.9
