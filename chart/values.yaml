global:
  # Global labels to add to all resources in this chart.
  # These labels and annotations will also be added to cert-manager resources
  # as the use the same global values.
  commonLabels:
    tenancy.io/stack: "k3s-certs"
    tenancy.io/tenant: "testing"

  commonAnnotations: {}

  # Global node selector
  # The nodeSelector on Pods tells Kubernetes to schedule Pods on the nodes with matching labels.
  nodeSelector: {}

  # The optional priority class to be used for the cert-manager pods.
  priorityClassName: ""

# Deploy the resources in this chart. If set to false only the dependancies
# will be deployed.
enabled: true

namespace:
  # If the namespace should be created using helm hooks before the chart is deployed.
  hooked: true

networkPolicies:
  enabled: false

issuers:
  enabled: false

  issuers:
    # Issuer with all fields
    - name: letsencrypt-staging-all-fields
      enabled: false
      server: https://acme-staging-v02.api.letsencrypt.org/directory
      # Only existing secrets are supported, either an external secret
      # or a previously created secret
      secretName: cloudflare-issuer-secret
      domains:
        - example1.com
        - example2.com
        # Add more domains as needed
      # The secret can either be pulled from an external secret store or reflected
      # from another namespace. Only one can be used at a time.
      # If both are set the reflected secret will be used.
      externalSecret:
        # If set to false the chart will assume a secret with the set secretName
        # and the connect token in the token property is already present
        # in the namespace. If set to true the chart will attempt to retreive
        # the connect token from the secret store defined in the secretStore
        # property.
        enabled: false
        # Name in the remote secret store
        secretName: cloudflare-issuer-secret
        # Name of the deployed secret store in the cluster
        secretStore: kubernetes
        # Type is optional but will default to ClusterSecretStore
        # secretStoreType: ClusterSecretStore

        # Property of the remote secret store that contains the token
        # Optional, will default to "password"
        # secretField: password
      reflectedSecret:
        # If set to true the chart will create a reflected secret in the namespace
        # with the name of the secretName property.
        enabled: true
        originNamespace: default
        originSecretName: cloudflare-issuer-secret

clusterIssuers:
  enabled: false

  issuers:
    # Issuer with all fields
    - name: letsencrypt-staging-all-fields
      enabled: false
      server: https://acme-staging-v02.api.letsencrypt.org/directory
      # Only existing secrets are supported, either an external secret
      # or a previously created secret
      secretName: cloudflare-issuer-secret
      domains:
        - example1.com
        - example2.com
          # Add more domains as needed
      externalSecret:
        enabled: false
        # Name in the remote secret store
        secretName: cloudflare-cluster-issuer-secret
        # Name of the deployed secret store in the cluster
        secretStore: kubernetes
        # Type is optional but will default to ClusterSecretStore
        # secretStoreType: ClusterSecretStore

        # Property of the remote secret store that contains the token
        # Optional, will default to "password"
        # secretField: password
      reflectedSecret:
        # If set to true the chart will create a reflected secret in the namespace
        # with the name of the secretName property.
        enabled: true
        originNamespace: default
        originSecretName: cloudflare-issuer-secret

# Scoped external secret vaults to push certificates to. To use these vaults
# external-secrets must be configured to use the vaults and have read/write
# permissions to the vaults.
# This is useful for pushing certificates to a vault like 1Password for use
# in other namespaces or clusters.
certStores:
  enabled: false
  stores:
    - name: certs-push-vault
      enabled: false
      vault: kubernetes-certs-vault
      # Make sure the token has read and write permissions to the vault
      # otherwise issues will arise during creation/deletion
      secretName: certs-push-token
      externalSecret:
        enabled: false
        secretName: certVaultToken
        storeName: kubernetes-certs-vault
        # Type is optional but will default to ClusterSecretStore
        # storeType: ClusterSecretStore
        # Optional, the field in the secret that contains the access token
        # secretField: "password"
      reflectedSecret:
        # If set to true the chart will create a reflected secret in the namespace
        # with the name of the secretName property.
        enabled: true
        originNamespace: default
        originSecretName: certs-push-vault-token

# Enable certs management using the defined issuers
certs:
  enabled: false

  # If enabled, the operator will push the certificates to the vaults defined in certPushVaults
  push: 
    # If enabled, the certificates will be pushed to the vaults defined in certPushVaults
    enabled: false
    # Default settings for certificates pushed to vaults
    refreshInterval: 1h

  certs:
    - name: example-com-tls
      enabled: false
      commonName: example.com
      issuer: letsencrypt-staging
      # Certificate for the root domain and wildcard
      dnsNames:
        - example.com
        - "*.example.com"
      push: 
        # If enabled, the certificate will be pushed to the vaults defined in certVaults
        # Will only work if certs.push.enabled and certVaults.enabled are true.
        enabled: false
        # Refresh interval for the certificate in the vaults
        # This is the interval at which the certificate will be updated in the vaults
        # If not set, the default refresh interval from certs.push will be used.
        # refreshInterval: 1h

        # Name of the secret in the vault. If not set the name of the certificate will be used.
        # secretName: example-com-tls

        # Name of the stores to push the certificate to.
        secretStores: 
          - certs-push-vault
          - another-certs-push-vault

# Helm values passed to the cert-manager chart.
cert-manager: 
  enabled: true
  crds:
    enabled: true
  replicaCount: 1
  extraArgs:
    - --dns01-recursive-nameservers=1.1.1.1:53,9.9.9.9:53
    - --dns01-recursive-nameservers-only
  podDnsPolicy: None
  podDnsConfig:
    nameservers:
      - 1.1.1.1
      - 9.9.9.9
  
  prometheus:
    enabled: false
    podmonitor:
      enabled: false
